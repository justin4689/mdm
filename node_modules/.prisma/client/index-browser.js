
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  serial_number: 'serial_number',
  model: 'model',
  brand: 'brand',
  os_version: 'os_version',
  enrolled_at: 'enrolled_at',
  last_seen: 'last_seen',
  battery_level: 'battery_level',
  network_status: 'network_status',
  status: 'status'
};

exports.Prisma.DeviceLocationScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  latitude: 'latitude',
  longitude: 'longitude',
  recorded_at: 'recorded_at'
};

exports.Prisma.PolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  allow_camera: 'allow_camera',
  allow_wifi: 'allow_wifi',
  allow_bluetooth: 'allow_bluetooth',
  require_password: 'require_password',
  kiosk_mode: 'kiosk_mode',
  created_at: 'created_at'
};

exports.Prisma.DevicePolicyScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  policy_id: 'policy_id',
  applied_at: 'applied_at'
};

exports.Prisma.CommandScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  admin_id: 'admin_id',
  command_type: 'command_type',
  payload: 'payload',
  status: 'status',
  created_at: 'created_at',
  executed_at: 'executed_at'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  admin_id: 'admin_id',
  event_type: 'event_type',
  message: 'message',
  created_at: 'created_at'
};

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  name: 'name',
  package_name: 'package_name',
  version: 'version',
  source: 'source',
  download_url: 'download_url',
  created_at: 'created_at'
};

exports.Prisma.DeviceAppScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  app_id: 'app_id',
  status: 'status'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.DeviceGroupScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  group_id: 'group_id'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  alert_type: 'alert_type',
  severity: 'severity',
  message: 'message',
  created_at: 'created_at',
  resolved: 'resolved'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  username: 'username',
  email: 'email',
  password_hash: 'password_hash'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.DeviceOrderByRelevanceFieldEnum = {
  device_id: 'device_id',
  serial_number: 'serial_number',
  model: 'model',
  brand: 'brand',
  os_version: 'os_version',
  network_status: 'network_status'
};

exports.Prisma.PolicyOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.LogOrderByRelevanceFieldEnum = {
  event_type: 'event_type',
  message: 'message'
};

exports.Prisma.AppOrderByRelevanceFieldEnum = {
  name: 'name',
  package_name: 'package_name',
  version: 'version',
  download_url: 'download_url'
};

exports.Prisma.GroupOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.AlertOrderByRelevanceFieldEnum = {
  message: 'message'
};
exports.Role = exports.$Enums.Role = {
  superadmin: 'superadmin',
  admin: 'admin'
};

exports.DeviceStatus = exports.$Enums.DeviceStatus = {
  active: 'active',
  locked: 'locked',
  wiped: 'wiped',
  kiosk: 'kiosk'
};

exports.CommandType = exports.$Enums.CommandType = {
  lock: 'lock',
  wipe: 'wipe',
  kiosk: 'kiosk',
  update_policy: 'update_policy',
  custom: 'custom'
};

exports.CommandStatus = exports.$Enums.CommandStatus = {
  pending: 'pending',
  sent: 'sent',
  executed: 'executed',
  failed: 'failed'
};

exports.AppSource = exports.$Enums.AppSource = {
  apk: 'apk',
  playstore: 'playstore'
};

exports.DeviceAppStatus = exports.$Enums.DeviceAppStatus = {
  pending: 'pending',
  installed: 'installed',
  failed: 'failed',
  removed: 'removed'
};

exports.AlertType = exports.$Enums.AlertType = {
  low_battery: 'low_battery',
  offline: 'offline',
  policy_violation: 'policy_violation',
  app_missing: 'app_missing',
  unauthorized_access: 'unauthorized_access'
};

exports.AlertSeverity = exports.$Enums.AlertSeverity = {
  info: 'info',
  warning: 'warning',
  critical: 'critical'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Device: 'Device',
  DeviceLocation: 'DeviceLocation',
  Policy: 'Policy',
  DevicePolicy: 'DevicePolicy',
  Command: 'Command',
  Log: 'Log',
  App: 'App',
  DeviceApp: 'DeviceApp',
  Group: 'Group',
  DeviceGroup: 'DeviceGroup',
  Alert: 'Alert'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
