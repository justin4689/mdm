generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int       @id @default(autoincrement())
  username      String    @db.VarChar(100) @unique
  email         String    @db.VarChar(150) @unique
  password_hash String    @db.VarChar(255)
  role          Role      @default(admin)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  commands      Command[]
  logs          Log[]

  @@map("admins")
}

model Device {
  id              Int               @id @default(autoincrement())
  device_id       String            @db.VarChar(255) @unique
  serial_number   String?           @db.VarChar(100)
  model           String?           @db.VarChar(100)
  brand           String?           @db.VarChar(100)
  os_version      String?           @db.VarChar(50)
  enrolled_at     DateTime          @default(now()) @db.Timestamp(6)
  last_seen       DateTime?         @db.Timestamp(6)
  battery_level   Int?              
  network_status  String?           @db.VarChar(50)
  status          DeviceStatus      @default(active)
  locations       DeviceLocation[]
  devicePolicies  DevicePolicy[]
  commands        Command[]
  deviceApps      DeviceApp[]
  deviceGroups    DeviceGroup[]
  alerts          Alert[]
  logs            Log[]

  @@map("devices")
}

model DeviceLocation {
  id         Int       @id @default(autoincrement())
  device_id  Int
  device     Device    @relation(fields: [device_id], references: [id], onDelete: Cascade)
  latitude   Decimal?  @db.Decimal(10, 8)
  longitude  Decimal?  @db.Decimal(11, 8)
  recorded_at DateTime @default(now()) @db.Timestamp(6)

  @@map("device_locations")
}

model Policy {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(100)
  description     String?         @db.Text
  allow_camera    Boolean         @default(true)
  allow_wifi      Boolean         @default(true)
  allow_bluetooth Boolean         @default(true)
  require_password Boolean        @default(false)
  kiosk_mode      Boolean        @default(false)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  devicePolicies  DevicePolicy[]

  @@map("policies")
}

model DevicePolicy {
  id         Int      @id @default(autoincrement())
  device_id  Int
  policy_id  Int
  applied_at DateTime @default(now()) @db.Timestamp(6)
  device     Device   @relation(fields: [device_id], references: [id], onDelete: Cascade)
  policy     Policy   @relation(fields: [policy_id], references: [id], onDelete: Cascade)

  @@map("device_policies")
}

model Command {
  id           Int           @id @default(autoincrement())
  device_id    Int
  admin_id     Int
  command_type CommandType
  payload      Json?
  status       CommandStatus @default(pending)
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  executed_at  DateTime?     @db.Timestamp(6)
  device       Device        @relation(fields: [device_id], references: [id], onDelete: Cascade)
  admin        Admin         @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@map("commands")
}

model Log {
  id         Int       @id @default(autoincrement())
  device_id  Int?
  admin_id   Int?
  event_type String?   @db.VarChar(100)  // ex: "login_admin", "device_locked", "wipe_executed"
  message    String?   @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(6)
  device     Device?   @relation(fields: [device_id], references: [id], onDelete: SetNull)
  admin      Admin?    @relation(fields: [admin_id], references: [id], onDelete: SetNull)

  @@map("logs")
}

model App {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(150)
  package_name String      @db.VarChar(200)
  version      String?     @db.VarChar(50)
  source       AppSource   @default(apk)
  download_url String?     @db.Text
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  deviceApps   DeviceApp[]

  @@map("apps")
}

model DeviceApp {
  id         Int             @id @default(autoincrement())
  device_id  Int
  app_id     Int
  status     DeviceAppStatus @default(pending)
  device     Device          @relation(fields: [device_id], references: [id], onDelete: Cascade)
  app        App             @relation(fields: [app_id], references: [id], onDelete: Cascade)

  @@map("device_apps")
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String?        @db.Text
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  deviceGroups DeviceGroup[]

  @@map("groups")
}

model DeviceGroup {
  id         Int     @id @default(autoincrement())
  device_id  Int
  group_id   Int
  device     Device  @relation(fields: [device_id], references: [id], onDelete: Cascade)
  group      Group   @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("device_groups")
}

model Alert {
  id           Int           @id @default(autoincrement())
  device_id    Int
  alert_type   AlertType
  severity     AlertSeverity @default(info)
  message      String?       @db.Text
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  resolved     Boolean       @default(false)
  device       Device        @relation(fields: [device_id], references: [id], onDelete: Cascade)

  @@map("alerts")
}

enum Role {
  superadmin
  admin
}

enum DeviceStatus {
  active
  locked
  wiped
  kiosk
}

enum CommandType {
  lock
  wipe
  kiosk
  update_policy
  custom
}

enum CommandStatus {
  pending
  sent
  executed
  failed
}

enum AppSource {
  apk
  playstore
}

enum DeviceAppStatus {
  pending
  installed
  failed
  removed
}

enum AlertType {
  low_battery
  offline
  policy_violation
  app_missing
  unauthorized_access
}

enum AlertSeverity {
  info
  warning
  critical
}